# rules_rust_external file format 1
# config hash cefb0964c75c7d1dc3890c8977538c13b2288dfd02b76525f5f0b8242115c2e4

load("@bazel_tools//tools/build_defs/repo:git.bzl", "new_git_repository")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

def pinned_rust_install():
    http_archive(
        name = "__bzip2__0_3_3",
        # TODO: Allow configuring where rust_library comes from
        build_file_content = """# buildifier: disable=load
load(
    "@io_bazel_rules_rust//rust:rust.bzl",
    "rust_binary",
    "rust_library",
    "rust_test",
)

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

package(default_visibility = [
    "//visibility:public",
])

licenses([
    "notice",  # MIT from expression "MIT OR Apache-2.0"
])

# Generated targets

# buildifier: leave-alone
rust_library(
    name = "bzip2",
    crate_type = "lib",
    deps = [
        "@__bzip2_sys__0_1_9_1_0_8//:bzip2_sys",
        "@__libc__0_2_76//:libc",
    ],
    srcs = glob(["**/*.rs"]),
    crate_root = "src/lib.rs",
    edition = "2015",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    data = glob(["**"], exclude=[
        # These can be manually added with overrides if needed.

        # If you run `cargo build` in this dir, the target dir can get very big very quick.
        "target/**",

        # These are not vendored from the crate - we exclude them to avoid busting caches
        # when we change how we generate BUILD files and such.
        "BUILD.bazel",
        "WORKSPACE.bazel",
        "WORKSPACE",
    ]),
    version = "0.3.3",
    tags = [
        "cargo-raze",
        "manual",
    ],
    crate_features = [
    ],
    aliases = select({
        # Default
        "//conditions:default": {
        },
    }),
)
# Unsupported target "tokio" with type "test" omitted
""",
        strip_prefix = "bzip2-0.3.3",
        type = "tar.gz",
        url = "https://crates.io/api/v1/crates/bzip2/0.3.3/download",
    )

    http_archive(
        name = "__bzip2_sys__0_1_9_1_0_8",
        # TODO: Allow configuring where rust_library comes from
        build_file_content = """# buildifier: disable=load
load(
    "@io_bazel_rules_rust//rust:rust.bzl",
    "rust_binary",
    "rust_library",
    "rust_test",
)

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

package(default_visibility = [
    "//visibility:public",
])

licenses([
    "notice",  # MIT from expression "MIT OR Apache-2.0"
])

# Generated targets
# buildifier: disable=load-on-top
load(
    "@io_bazel_rules_rust//cargo:cargo_build_script.bzl",
    "cargo_build_script",
)

# buildifier: leave-alone
cargo_build_script(
    name = "bzip2_sys_build_script",
    srcs = glob(["**/*.rs"]),
    crate_root = "build.rs",
    edition = "2015",
    deps = [
        "@__cc__1_0_65//:cc",
        "@__pkg_config__0_3_19//:pkg_config",
    ],
    rustc_flags = [
        "--cap-lints=allow",
    ],
    crate_features = [
    ],
    build_script_env = {
    },
    links = "bzip2",
    data = glob(["**"], exclude=[
        # These can be manually added with overrides if needed.

        # If you run `cargo build` in this dir, the target dir can get very big very quick.
        "target/**",

        # These are not vendored from the crate - we exclude them to avoid busting caches
        # when we change how we generate BUILD files and such.
        "BUILD.bazel",
        "WORKSPACE.bazel",
        "WORKSPACE",
    ]),
    tags = [
        "cargo-raze",
        "manual",
    ],
    version = "0.1.9+1.0.8",
    visibility = ["//visibility:private"],
)


# buildifier: leave-alone
rust_library(
    name = "bzip2_sys",
    crate_type = "lib",
    deps = [
        ":bzip2_sys_build_script",
        "@__libc__0_2_76//:libc",
    ],
    srcs = glob(["**/*.rs"]),
    crate_root = "lib.rs",
    edition = "2015",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    data = glob(["**"], exclude=[
        # These can be manually added with overrides if needed.

        # If you run `cargo build` in this dir, the target dir can get very big very quick.
        "target/**",

        # These are not vendored from the crate - we exclude them to avoid busting caches
        # when we change how we generate BUILD files and such.
        "BUILD.bazel",
        "WORKSPACE.bazel",
        "WORKSPACE",
    ]),
    version = "0.1.9+1.0.8",
    tags = [
        "cargo-raze",
        "manual",
    ],
    crate_features = [
    ],
    aliases = select({
        # Default
        "//conditions:default": {
        },
    }),
)
""",
        strip_prefix = "bzip2-sys-0.1.9+1.0.8",
        type = "tar.gz",
        url = "https://crates.io/api/v1/crates/bzip2-sys/0.1.9+1.0.8/download",
    )

    http_archive(
        name = "__cc__1_0_65",
        # TODO: Allow configuring where rust_library comes from
        build_file_content = """# buildifier: disable=load
load(
    "@io_bazel_rules_rust//rust:rust.bzl",
    "rust_binary",
    "rust_library",
    "rust_test",
)

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

package(default_visibility = [
    "//visibility:public",
])

licenses([
    "notice",  # MIT from expression "MIT OR Apache-2.0"
])

# Generated targets

# buildifier: leave-alone
rust_binary(
    # Prefix bin name to disambiguate from (probable) collision with lib name
    # N.B.: The exact form of this is subject to change.
    name = "cargo_bin_gcc_shim",
    deps = [
        # Binaries get an implicit dependency on their crate's lib
        ":cc",
    ],
    srcs = glob(["**/*.rs"]),
    crate_root = "src/bin/gcc-shim.rs",
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    data = glob(["**"], exclude=[
        # These can be manually added with overrides if needed.

        # If you run `cargo build` in this dir, the target dir can get very big very quick.
        "target/**",

        # These are not vendored from the crate - we exclude them to avoid busting caches
        # when we change how we generate BUILD files and such.
        "BUILD.bazel",
        "WORKSPACE.bazel",
        "WORKSPACE",
    ]),
    version = "1.0.65",
    tags = [
        "cargo-raze",
        "manual",
    ],
    crate_features = [
    ],
    aliases = select({
        # Default
        "//conditions:default": {
        },
    }),
)

# buildifier: leave-alone
rust_library(
    name = "cc",
    crate_type = "lib",
    deps = [
    ],
    srcs = glob(["**/*.rs"]),
    crate_root = "src/lib.rs",
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    data = glob(["**"], exclude=[
        # These can be manually added with overrides if needed.

        # If you run `cargo build` in this dir, the target dir can get very big very quick.
        "target/**",

        # These are not vendored from the crate - we exclude them to avoid busting caches
        # when we change how we generate BUILD files and such.
        "BUILD.bazel",
        "WORKSPACE.bazel",
        "WORKSPACE",
    ]),
    version = "1.0.65",
    tags = [
        "cargo-raze",
        "manual",
    ],
    crate_features = [
    ],
    aliases = select({
        # Default
        "//conditions:default": {
        },
    }),
)
# Unsupported target "cc_env" with type "test" omitted
# Unsupported target "cflags" with type "test" omitted
# Unsupported target "cxxflags" with type "test" omitted
# Unsupported target "test" with type "test" omitted
""",
        strip_prefix = "cc-1.0.65",
        type = "tar.gz",
        url = "https://crates.io/api/v1/crates/cc/1.0.65/download",
    )

    http_archive(
        name = "__libc__0_2_76",
        # TODO: Allow configuring where rust_library comes from
        build_file_content = """# buildifier: disable=load
load(
    "@io_bazel_rules_rust//rust:rust.bzl",
    "rust_binary",
    "rust_library",
    "rust_test",
)

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

package(default_visibility = [
    "//visibility:public",
])

licenses([
    "notice",  # MIT from expression "MIT OR Apache-2.0"
])

# Generated targets
# buildifier: disable=load-on-top
load(
    "@io_bazel_rules_rust//cargo:cargo_build_script.bzl",
    "cargo_build_script",
)

# buildifier: leave-alone
cargo_build_script(
    name = "libc_build_script",
    srcs = glob(["**/*.rs"]),
    crate_root = "build.rs",
    edition = "2015",
    deps = [
    ],
    rustc_flags = [
        "--cap-lints=allow",
    ],
    crate_features = [
      "default",
      "std",
    ],
    build_script_env = {
    },
    data = glob(["**"], exclude=[
        # These can be manually added with overrides if needed.

        # If you run `cargo build` in this dir, the target dir can get very big very quick.
        "target/**",

        # These are not vendored from the crate - we exclude them to avoid busting caches
        # when we change how we generate BUILD files and such.
        "BUILD.bazel",
        "WORKSPACE.bazel",
        "WORKSPACE",
    ]),
    tags = [
        "cargo-raze",
        "manual",
    ],
    version = "0.2.76",
    visibility = ["//visibility:private"],
)


# buildifier: leave-alone
rust_library(
    name = "libc",
    crate_type = "lib",
    deps = [
        ":libc_build_script",
    ],
    srcs = glob(["**/*.rs"]),
    crate_root = "src/lib.rs",
    edition = "2015",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    data = glob(["**"], exclude=[
        # These can be manually added with overrides if needed.

        # If you run `cargo build` in this dir, the target dir can get very big very quick.
        "target/**",

        # These are not vendored from the crate - we exclude them to avoid busting caches
        # when we change how we generate BUILD files and such.
        "BUILD.bazel",
        "WORKSPACE.bazel",
        "WORKSPACE",
    ]),
    version = "0.2.76",
    tags = [
        "cargo-raze",
        "manual",
    ],
    crate_features = [
        "default",
        "std",
    ],
    aliases = select({
        # Default
        "//conditions:default": {
        },
    }),
)
# Unsupported target "const_fn" with type "test" omitted
""",
        strip_prefix = "libc-0.2.76",
        type = "tar.gz",
        url = "https://crates.io/api/v1/crates/libc/0.2.76/download",
    )

    http_archive(
        name = "__pkg_config__0_3_19",
        # TODO: Allow configuring where rust_library comes from
        build_file_content = """# buildifier: disable=load
load(
    "@io_bazel_rules_rust//rust:rust.bzl",
    "rust_binary",
    "rust_library",
    "rust_test",
)

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

package(default_visibility = [
    "//visibility:public",
])

licenses([
    "notice",  # MIT from expression "MIT OR Apache-2.0"
])

# Generated targets

# buildifier: leave-alone
rust_library(
    name = "pkg_config",
    crate_type = "lib",
    deps = [
    ],
    srcs = glob(["**/*.rs"]),
    crate_root = "src/lib.rs",
    edition = "2015",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    data = glob(["**"], exclude=[
        # These can be manually added with overrides if needed.

        # If you run `cargo build` in this dir, the target dir can get very big very quick.
        "target/**",

        # These are not vendored from the crate - we exclude them to avoid busting caches
        # when we change how we generate BUILD files and such.
        "BUILD.bazel",
        "WORKSPACE.bazel",
        "WORKSPACE",
    ]),
    version = "0.3.19",
    tags = [
        "cargo-raze",
        "manual",
    ],
    crate_features = [
    ],
    aliases = select({
        # Default
        "//conditions:default": {
        },
    }),
)
# Unsupported target "test" with type "test" omitted
""",
        strip_prefix = "pkg-config-0.3.19",
        type = "tar.gz",
        url = "https://crates.io/api/v1/crates/pkg-config/0.3.19/download",
    )


CRATE_TARGET_NAMES = {
    "bzip2": "@__bzip2__0_3_3//:bzip2",
    "libc": "@__libc__0_2_76//:libc",
}

def crate(crate_name):
    """Return the name of the target for the given crate.
    """
    target_name = CRATE_TARGET_NAMES.get(crate_name)
    if target_name == None:
        fail("Unknown crate name: {}".format(crate_name))
    return target_name

def all_deps():
    """Return all standard dependencies explicitly listed in the Cargo.toml or packages list."""
    return [
        crate(crate_name) for crate_name in [
            "bzip2",
            "libc",
        ]
    ]

def all_proc_macro_deps():
    """Return all proc-macro dependencies explicitly listed in the Cargo.toml or packages list."""
    return [
        crate(crate_name) for crate_name in [
        ]
    ]

def crates_from(label):
    mapping = {
        "//:Cargo.toml": [crate("bzip2")],
    }

    return mapping[_absolutify(label)]

def proc_macro_crates_from(label):
    mapping = {
        "//:Cargo.toml": [],
    }

    return mapping[_absolutify(label)]

def _absolutify(label):
    if label.startswith("//") or label.startswith("@"):
        return label
    if label.startswith(":"):
        return "//" + native.package_name() + label
    return "//" + native.package_name() + ":" + label
